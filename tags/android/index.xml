<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on Liut</title>
    <link>https://www.liut.xyz/tags/android/</link>
    <description>Recent content in Android on Liut</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 29 Aug 2019 21:24:25 +0800</lastBuildDate>
    
	<atom:link href="https://www.liut.xyz/tags/android/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Gradle Android 打包插件</title>
      <link>https://www.liut.xyz/posts/code/androidreleaseplugin/</link>
      <pubDate>Thu, 29 Aug 2019 21:24:25 +0800</pubDate>
      
      <guid>https://www.liut.xyz/posts/code/androidreleaseplugin/</guid>
      <description>工作中写的一些 Gradle Task, 整理成了一个 plugin, 已发布到 Gradle 社区仓库， 源码： https://github.com/lt-123/AndroidReleasePlugin
功能说明  打包指定变种 apk 输出到指定的文件夹并重命名 对指定变种 apk 进行加固（仅支持360加固）  使用 引入   添加 classpath
buildscript { repositories { google() jcenter() // 添加仓库  maven { url &amp;#34;https://plugins.gradle.org/m2/&amp;#34; } } dependencies { classpath &amp;#39;com.android.tools.build:gradle:3.4.2&amp;#39; // 添加 classpath  classpath &amp;#34;gradle.plugin.xyz.liut.gradleplugin:buildSrc:版本号&amp;#34; // NOTE: Do not place your application dependencies here; they belong  // in the individual module build.gradle files  } }   在 app 模块中添加 plugin</description>
    </item>
    
    <item>
      <title>常用ADB命令</title>
      <link>https://www.liut.xyz/posts/android/%E5%B8%B8%E7%94%A8adb%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Fri, 27 Oct 2017 16:17:36 +0800</pubDate>
      
      <guid>https://www.liut.xyz/posts/android/%E5%B8%B8%E7%94%A8adb%E5%91%BD%E4%BB%A4/</guid>
      <description># 显示已连接的设备 adb devices # 显示结果如下所示： # List of devices attached # 6e070d91 device # 其中6e070d91是设备的id，device是设备的状态。 # 设备状态有3种：offline表示设备离线，device表示设备连接正常，no device表示没有设备连接 # 如果有多台手机连接到电脑，则需要用 -s 指定adb调用的手机，如 # adb -s 6e070d91 install helloWorld.apk # 获取手机序列号 adb get-serialno # 获取手机连接的状态即offline、device和no device adb get-state # 在手机状态变成device后执行install helloWorld.apk adb wait-for-device install helloWorld.apk # 安装helloWorld.apk到手机上，如果手机里已经安装该应用，可加 -r 重新安装并保留应用的数据 adb install helloWorld.apk # 卸载包名为com.example.test的应用，可加 -k 在卸载时保留配置和缓存文件 adb uninstall com.example.test # 显示logcat，可使用grep过滤log，如adb logcat | grep debug adb logcat # 复制手机的/sdcard/foo.txt文件到本地并命名为foo.txt adb pull /sdcard/foo.</description>
    </item>
    
    <item>
      <title>优雅地用 Android Studio 打开 eclipse 项目</title>
      <link>https://www.liut.xyz/posts/android/%E4%BC%98%E9%9B%85%E5%9C%B0%E7%94%A8-android-studio-%E6%89%93%E5%BC%80-eclipse-%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Sat, 20 May 2017 11:58:06 +0200</pubDate>
      
      <guid>https://www.liut.xyz/posts/android/%E4%BC%98%E9%9B%85%E5%9C%B0%E7%94%A8-android-studio-%E6%89%93%E5%BC%80-eclipse-%E9%A1%B9%E7%9B%AE/</guid>
      <description>注：本脚本近适用于单 project 项目，如果有其他 project 依赖，请自使用 eclipse 的导出 gradle 项目功能。
痛点 一些老旧的 Android 项目是 eclipse 的， 而且 eclipse 早就放弃了对 Android 的支持， 需要自行配置或使用旧版本。 如果使用 as 导入功能， 会破坏原有的目录结构， eclipse 有导出为 gradle 项目功能， 导出后还需要二次手动修改、更新等。
解决办法 在项目根目录新建 build.gradle 如下，而后用 Android studio 打开此文件即可 （注意，就是打开，不是导入）。
// 把此文件放在 eclipse 项目的跟目录，用 as 打开此文件即可。第一次可能会稍慢。 apply plugin: &amp;#39;com.android.application&amp;#39; android { // 可按需修改  compileSdkVersion 21 buildToolsVersion &amp;#34;25.0.3&amp;#34; // 可按需修改或删除  defaultConfig { versionCode 1 versionName &amp;#39;88888&amp;#39; } // 设置 sourceSets 为 eclipse 结构  sourceSets { main { manifest.</description>
    </item>
    
    <item>
      <title>基于 Html&#43;css&#43;js 的混合开发</title>
      <link>https://www.liut.xyz/posts/android/%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/</link>
      <pubDate>Sat, 20 May 2017 11:58:06 +0200</pubDate>
      
      <guid>https://www.liut.xyz/posts/android/%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/</guid>
      <description>[TOC]
关于混合开发 混合开发有多种实现方式，最简单的就是 web 网页加壳， 不过这种方式体验较差； 另外比较高级点的就是采用一些混合开发框架， 如 ionic 等； 还有就是 react native,weex 这种框架，同样是用前端代码，却能构建出 native application，极大提高了性能、兼容性。
现代的混合开发框架的选择 经过了解，现在比较流行的框架有 react native、 ionic、cordova 以及国内的 weex、wex5、mui 等，就百度、知乎以及请教前端工作的朋友等途径对它们进行了了解，初步选定了React Native，weex，ionic 以及 Mobile Angular UI。
相关数据：
   items javascript 框架 界面 发布者 github star     React Native react native facebook 49k   weex vue.js native alibaba 14k   ionic AngularJS html ionic-team 29k   Mobile Angular UI AngularJS html mcasimir 2k    从 github star 来看，无疑， react native 是最火爆的，百度指数（截止05.</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>java on liut</title><link>https://www.liut.xyz/tags/java/</link><description>Recent content in java on liut</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© Copyright notice</copyright><lastBuildDate>Thu, 01 Aug 2019 20:27:36 +0800</lastBuildDate><atom:link href="https://www.liut.xyz/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>从 Java 类的初始化看待饿汉单例</title><link>https://www.liut.xyz/posts/java/java-%E5%8D%95%E4%BE%8B/</link><pubDate>Thu, 01 Aug 2019 20:27:36 +0800</pubDate><guid>https://www.liut.xyz/posts/java/java-%E5%8D%95%E4%BE%8B/</guid><description>先说观点： 在一般情况下， 饿汉式单例也不一定是立即加载的， 没必要特意使用写法复杂并且可能效率不高的懒汉模式。
单例模式 Java中单例 (Singleton) 模式是一种广泛使用的设计模式。单例模式的主要作用是保证在Java程序中，某个类只有一个实例存在。
分类以及常见写法 根据单例的初始化时机， java 单例可分为两大类别， 懒汉式和饿汉式。 （此外， 还有登记式， 不在本文讨论范围内）
饿汉式 饿汉式是在类加载器初始化该单例类时进行实例化。 常见方式如下：
静态工厂方法式饿汉 public class EagerSingleton { private static final EagerSingleton INSTANCE = new EagerSingleton(); private EagerSingleton() { System.</description></item><item><title>java的几种对象(PO,VO,DAO,BO,POJO，DTO)解释</title><link>https://www.liut.xyz/posts/java/java%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AF%B9%E8%B1%A1povodaobopojodto%E8%A7%A3%E9%87%8A/</link><pubDate>Sat, 23 Sep 2017 15:15:15 +0800</pubDate><guid>https://www.liut.xyz/posts/java/java%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AF%B9%E8%B1%A1povodaobopojodto%E8%A7%A3%E9%87%8A/</guid><description>PO： persistant object持久对象 最形象的理解就是一个PO就是数据库中的一条记录。 好处是可以把一条记录作为一个对象处理，可以方便的转为其它对象。
BO： business object业务对象 主要作用是把业务逻辑封装为一个对象。这个对象可以包括一个或多个其它的对象。 比如一个简历，有教育经历、工作经历、 关系等等。 我们可以把教育经历对应一个PO，工作经历对应一个PO， 关系对应一个PO。 建立一个对应简历的BO对象处理简历，每个BO包含这些PO。 这样处理业务逻辑时，我们就可以针对BO去处理。
VO ： value object值对象 ViewObject表现层对象 主要对应界面显示的数据对象。对于一个WEB页面，或者SWT、SWING的一个界面，用一个VO对象对应整个界面的值。</description></item><item><title>位运算</title><link>https://www.liut.xyz/posts/java/%E4%BD%8D%E8%BF%90%E7%AE%97/</link><pubDate>Sat, 23 Sep 2017 15:15:15 +0800</pubDate><guid>https://www.liut.xyz/posts/java/%E4%BD%8D%E8%BF%90%E7%AE%97/</guid><description>1. 原码反码补码：
计算机存储数据都是以二进制存储
byte 8位 short 16位 int 32位 long 64位
其中 最高位为符号位，0代表正数，1为负数，并且负数以补码的形式存在和参与计算,如果两个不同长度的数据进行位运算时，系统会将二者按右端对齐，然后进行位运算。
关于原码，反码，补码
原码 即正确的值。 反码 正数不变，负数反码 符号位不变，其余取反。 补码 正数不变，负数为反码+1。</description></item></channel></rss>
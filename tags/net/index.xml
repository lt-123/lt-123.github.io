<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>net on Liut</title>
    <link>https://www.liut.xyz/tags/net/</link>
    <description>Recent content in net on Liut</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 26 Oct 2017 21:00:02 +0800</lastBuildDate>
    
	<atom:link href="https://www.liut.xyz/tags/net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Shadowsocks使用kcptun加速</title>
      <link>https://www.liut.xyz/posts/net/shadowsocks%E4%BD%BF%E7%94%A8kcptun%E5%8A%A0%E9%80%9F/</link>
      <pubDate>Thu, 26 Oct 2017 21:00:02 +0800</pubDate>
      
      <guid>https://www.liut.xyz/posts/net/shadowsocks%E4%BD%BF%E7%94%A8kcptun%E5%8A%A0%E9%80%9F/</guid>
      <description>常用加速软件有 NetSpeed 、KcpTun 、锐速（Server Speeder） 等，其中，NetSpeed 最为粗暴，直接双倍发包，能大大降低丢包率，当然，流量也会双倍消耗；kcptun ，双边加速（服务端和客户端都需要配置），基于 KCP 协议的 UDP 隧道，它可以将 TCP 流转换为 KCP+UDP 流。而 KCP 是一个快速可靠协议，要求配置低，效果明显；锐速，单边加速，收费，官方已破产，有破解版，需配置内核。以下为 kcptun 配置记录。
  准备
Linux 服务器一台（已安装好shadowsocks）; windows 电脑一台（本文以windows配置为例）； kcptun_gclient(windows) kcptun_gclient 客户端； kcptun kcptun 客户端；
  获取一键安装脚本并执行
  wget https://github.com/kuoruan/shell-scripts/raw/master/kcptun/kcptun.sh chmod +x ./kcptun.sh ./kcptun.sh 执行后，会启动一键安装程序，中文界面，基本都按默认来，其中 kcptun 加速 IP （ss的IP127.0.0.1）和加速端口（ss的端口）要注意下，安装完成之后，会把所有的配置输出在终端，这些信息很重要，把它copy下来，留在下一步用。
 配置kcptun客户端
客户端就是上面那两个kcptun_gclient和kcptun 客户端，kcptun 客户端是纯命令行工具，用起来不太方便，kcptun_gclient则提供了GUI界面，打开kcptun_gclient，配置kcptun客户端软件client_windows_amd64.exe；然后建议使用配置文件，即从第二步里输出的客户端配置文件，把它单独保存在一个文件里面，如
{ &amp;#34;localaddr&amp;#34;: &amp;#34;:***&amp;#34;, &amp;#34;remoteaddr&amp;#34;: &amp;#34;****:***&amp;#34;, &amp;#34;key&amp;#34;: &amp;#34;***&amp;#34;, &amp;#34;crypt&amp;#34;: &amp;#34;aes&amp;#34;, &amp;#34;mode&amp;#34;: &amp;#34;fast2&amp;#34;, &amp;#34;mtu&amp;#34;: 1350, &amp;#34;sndwnd&amp;#34;: 512, &amp;#34;rcvwnd&amp;#34;: 512, &amp;#34;datashard&amp;#34;: 10, &amp;#34;parityshard&amp;#34;: 3, &amp;#34;dscp&amp;#34;: 0, &amp;#34;nocomp&amp;#34;: false } 然后再kcptun_gclient里面选中此文件并启动即可。</description>
    </item>
    
    <item>
      <title>关于NAT的理解</title>
      <link>https://www.liut.xyz/posts/net/%E5%85%B3%E4%BA%8Enat%E7%9A%84%E7%90%86%E8%A7%A3/</link>
      <pubDate>Wed, 25 Oct 2017 15:32:02 +0800</pubDate>
      
      <guid>https://www.liut.xyz/posts/net/%E5%85%B3%E4%BA%8Enat%E7%9A%84%E7%90%86%E8%A7%A3/</guid>
      <description>定义 网络地址转换(NAT,Network Address Translation)属接入广域网(WAN)技术，是一种将私有（保留）地址转化为合法IP地址的转换技术。 以下仅分析目前最常用的端口多路复用NAPT(Network Address/Port Translators)中的Cone NAT型（圆锥型）。
  原理 客户机（内网终端）访问公网服务时，其IP和端口会被映射为网关的一个端口，客户机所有访问外网的流量均通过此端口，同时，此端口收到的所有数据包都会返回到客户机。在网关时，两个不同session但**端口号相同 ** 。
  案例 通常，家用网络终端通过家用路由器访问互联网就是通过NAT技术，家用路由器会被DHCP服务器分配一个临时的公网IP，用以访问公网；其它终端如手机、电脑和路由器组建一个私网，其中，路由器为网关（NAT服务器）,终端设备访问外网服务时，其IP和端口会被映射为网关的一个端口。
  以上仅个人理解。</description>
    </item>
    
    <item>
      <title>POST-content-type</title>
      <link>https://www.liut.xyz/posts/net/post-content-type/</link>
      <pubDate>Sat, 23 Sep 2017 15:15:15 +0800</pubDate>
      
      <guid>https://www.liut.xyz/posts/net/post-content-type/</guid>
      <description>application/x-www-form-urlencoded 常用键值对post方式,为默认的content-type  这应该是最常见的 POST 提交数据的方式了。浏览器的原生 表单，如果不设置 enctype属性，那么最终就会以 application/x-www-form-urlencoded 方式提交数据。请求类似于下面这样（无关的请求头在本文中都省略掉了）：
POST http://www.example.com HTTP/1.1 Content-Type: application/x-www-form-urlencoded;charset=utf-8 title=test&amp;amp;sub%5B%5D=1&amp;amp;sub%5B%5D=2&amp;amp;sub%5B%5D=3  multipart/form-data  这又是一个常见的 POST 数据提交的方式。我们使用表单上传文件时，必须让 表单的 enctype等于 multipart/form-data。直接来看一个请求示例：
POST http://www.example.com HTTP/1.1 Content-Type:multipart/form-data; boundary=----WebKitFormBoundaryrGKCBY7qhFd3TrwA ------WebKitFormBoundaryrGKCBY7qhFd3TrwA Content-Disposition: form-data; name=&amp;#34;text&amp;#34; title ------WebKitFormBoundaryrGKCBY7qhFd3TrwA Content-Disposition: form-data; name=&amp;#34;file&amp;#34;; filename=&amp;#34;chrome.png&amp;#34; Content-Type: image/png PNG ... content of chrome.png ... ------WebKitFormBoundaryrGKCBY7qhFd3TrwA-- 这个例子稍微复杂点。首先生成了一个 boundary 用于分割不同的字段，为了避免与正文内容重复，boundary 很长很复杂。然后 Content-Type 里指明了数据是以 multipart/form-data 来编码，本次请求的 boundary 是什么内容。消息主体里按照字段个数又分为多个结构类似的部分，每部分都是以 &amp;ndash;boundary 开始，紧接着是内容描述信息，然后是回车，最后是字段具体内容（文本或二进制）。如果传输的是文件，还要包含文件名和文件类型信息。消息主体最后以 &amp;ndash;boundary&amp;ndash; 标示结束。关于 multipart/form-data 的详细定义，请前往 rfc1867查看。 这种方式一般用来上传文件，各大服务端语言对它也有着良好的支持。 上面提到的这两种 POST 数据的方式，都是浏览器原生支持的，而且现阶段标准中原生 表单也只支持这两种方式（通过 元素的 enctype 属性指定，默认为 application/x-www-form-urlencoded 。其实 enctype 还支持 text/plain，不过用得非常少）。随着越来越多的 Web 站点，尤其是 WebApp，全部使用 Ajax 进行数据交互之后，我们完全可以定义新的数据提交方式，给开发带来更多便利。</description>
    </item>
    
    <item>
      <title>shadowsocks-配置</title>
      <link>https://www.liut.xyz/posts/net/shadowsocks-%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sat, 23 Sep 2017 15:15:15 +0800</pubDate>
      
      <guid>https://www.liut.xyz/posts/net/shadowsocks-%E9%85%8D%E7%BD%AE/</guid>
      <description>shadowsocks 手动启动命令   server config
{ &amp;#34;server&amp;#34;: &amp;#34;1.1.1.1&amp;#34;, &amp;#34;server_port&amp;#34;: 1111, &amp;#34;local_port&amp;#34;: 1123, &amp;#34;password&amp;#34;: &amp;#34;1111111111&amp;#34;, &amp;#34;timeout&amp;#34;: 600, &amp;#34;method&amp;#34;: &amp;#34;aes-256-cfb&amp;#34; } command ssserver -c /etc/shadowsocks.json -d start
  client config
{ &amp;#34;server&amp;#34;: &amp;#34;1.1.1.1&amp;#34;, &amp;#34;server_port&amp;#34;: 1111, &amp;#34;local_address&amp;#34;: &amp;#34;127.0.0.1&amp;#34;, &amp;#34;local_port&amp;#34;: 1123, &amp;#34;password&amp;#34;: &amp;#34;1111111111&amp;#34;, &amp;#34;timeout&amp;#34;: 600, &amp;#34;method&amp;#34;: &amp;#34;aes-256-cfb&amp;#34;, &amp;#34;fast_open&amp;#34;: false, &amp;#34;workers&amp;#34;: 1 } command sslocal -c /etc/ssConfig.json
​
  附：shadowsocks go版 服务端一键安装脚本 wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-go.sh chmod +x shadowsocks-go.sh ./shadowsocks-go.sh 2&amp;gt;&amp;amp;1 | tee shadowsocks-go.</description>
    </item>
    
  </channel>
</rss>